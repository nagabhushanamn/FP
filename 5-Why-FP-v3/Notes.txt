


 -------------------------------------------------- 
  what is object ?
 --------------------------------------------------
  
      -> data,info,attr,prop    ==> State
      -> func,method,oprn,work  ==> Behav
      -> addr,loc,reference     ==> Identity
      
      obj ==> SBI
 
 --------------------------------------------------     
  what is class ?
 --------------------------------------------------
  
  	=> description/template ( s & b ) of similar objects
  	
  	
 -------------------------------------------------- 
 OO concepts
-------------------------------------------------- 
 	
 	1. Abstraction /front-end / interface 

 	   why we need ?
 	   
 	   ==> easy to use/learn by dependent object
 	   ==> loose-coupling b/w dependent & dependency
 	   
 	2. Encapsulation / back-end / implementation 
 	
 	   why we need ?
 		
 	   ==> hide complex impln of dependency to dependent
 	 
    3. Inheritance
    
       why we need ?
       
       => re-use/inherit common state || behav from generalized-class to specialized-class
    	
    4. Polymorphism
    
       why we need ?	
       
       => based on given strategy, obj shud able to react in different way
       
--------------------------------------------------   

e.g bank-appln  ( ref: use-case.jpg )

	e,g module : 'txr-service'
	
	step-1 : model / entity 
	
			 e.g  Account
	
	step-2 : layer(s)
			
			 1. repository/data-access layer   ==> persisting logic
			 
			 2. service/business layer         ==> processing logic
			 
			 3. web layer                      ==> request/response logic
	   	
--------------------------------------------------   
OO principles
--------------------------------------------------
    	 	   	
	S.O.L.I.D. 
	
	S — Single responsibility principle
	O — Open for extension & closed for modification principle
	L — Liskov substitution principle
	I — Interface segregation principle
	D — Dependency Inversion principle
 	   

--------------------------------------------------   
OO patterns
--------------------------------------------------
	
--------------------------------------------------	








in Java-8 : Functional Programming
-----------------------------------



		//---------------------------------------------------------
		//way-1

		class ByAmountCondition implements Predicate<Txn> {
			@Override
			public boolean test(Txn t) {
				return t.getAmount() == amount;
			}
		}
		Predicate<Txn> byAmountCondition=new ByAmountCondition();
		//---------------------------------------------------------
		
		
		//way-2 
		Predicate<Txn> byAmountCondition = new Predicate<Txn>() {
			@Override
			public boolean test(Txn t) {
				return t.getAmount() == amount;
			}
		};
		//---------------------------------------------------------
		
		
		
		//  in java-8
		
		
		Predicate<Txn> byAmountCondition=public boolean test(Txn t) {
											return t.getAmount() == amount;
										}
										
		|
		|
		|
		|
		V
		
		Predicate<Txn> byAmountCondition=boolean test(Txn t) {
											return t.getAmount() == amount;
										}										
		

		|
		|
		|
		|
		V

		Predicate<Txn> byAmountCondition=test(Txn t) {
											return t.getAmount() == amount;
										}	


		
		|
		|
		|
		|
		V

		Predicate<Txn> byAmountCondition=(Txn t) {
											return t.getAmount() == amount;
										}	

		
    	
		|
		|
		|
		|
		V 	   	
 	   
 	   Predicate<Txn> byAmountCondition=(t) {
											return t.getAmount() == amount;
										}	
										
 	   
		|
		|
		|
		|
		V 	  
 	   
 	     Predicate<Txn> byAmountCondition=(t) -> t.getAmount() == amount;
											
 	   
		|
		|
		|
		|
		V 	  
 	   
 	   Predicate<Txn> byAmountCondition=t -> t.getAmount() == amount;  // function in java   ( Lambda Expression )
 	   
 	   
 	   
 	-----------------------------------------------------------------
 	
 	
 	why FP in java ?
 	
 	
 	
 	reason-1 : clean & consise code
 	
 	
 				i.e we can separate 'what' & 'how' logic
 				
    ------------------------------------------------------------------				
 				
 	
 	
 	
 	
 	
 	   
 	   
 	   	      