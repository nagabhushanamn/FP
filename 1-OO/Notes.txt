



 OO

 -------------------------------------------------- 
  what is object ?
 --------------------------------------------------
  
      -> data,info,attr,prop    ==> State
      -> func,method,oprn,work  ==> Behav
      -> addr,loc,reference     ==> Identity
      
      obj ==> SBI
 
 --------------------------------------------------     
  what is class ?
 --------------------------------------------------
  
  	=> description/template ( s & b ) of similar objects
  	
 -------------------------------------------------- 
 OO concepts
-------------------------------------------------- 
 	
 	1. front-end / interface / Abstraction
 	
 	   why we need ?
 	   
 	   ==> easy to use/learn by dependent object
 	   ==> loose-coupling b/w dependent & dependency
 	   
 	2. back-end / implementation / Encapsulation   
 	
 		why we need ?
 		
 	   ==> hide complex impln for dependent
 	 
    3. Inheritance
    
       why we need ?
       
       => re-use/inherit common state || behav from generalized-class to specialized-class
    	
    4. Polymorphism
    
       why we need ?	
       
       => based on given strategy, obj shud able to react in different way
       
       
--------------------------------------------------   

e.g bank-appln


	e,g module : 'txr-service'
	
	
	step-1 : model / entity 
	
			 e.g  Account
	
	step-2 : layer(s)
	
			
			 1. repository/data-access layer   ==> persisting logic
			 
			 2. service/business layer         ==> processing logic
			 
			 3. web layer                      ==> request/response logic
	   	
--------------------------------------------------       	 	   	
 	   
	S.O.L.I.D. STANDS FOR:
	
	S — Single responsibility principle
	O — Open for extension & closed for modification principle
	L — Liskov substitution principle
	I — Interface segregation principle
	D — Dependency Inversion principle
 	   
 	   
 	   
 	   
 	   
 	   
 	   
 	   
 	   
 	   	      